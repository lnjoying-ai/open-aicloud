/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

/**
 * GeneralInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class GeneralInfo
{
    @JsonProperty("read_only")
    private Boolean readOnly = null;

    @JsonProperty("authproxy_settings")
    private AuthproxySetting authproxySettings = null;

    @JsonProperty("harbor_version")
    private String harborVersion = null;

    @JsonProperty("notification_enable")
    private Boolean notificationEnable = null;

    @JsonProperty("auth_mode")
    private String authMode = null;

    @JsonProperty("self_registration")
    private Boolean selfRegistration = null;

    @JsonProperty("external_url")
    private String externalUrl = null;

    @JsonProperty("project_creation_restriction")
    private String projectCreationRestriction = null;

    @JsonProperty("has_ca_root")
    private Boolean hasCaRoot = null;

    @JsonProperty("with_notary")
    private Boolean withNotary = null;

    @JsonProperty("registry_storage_provider_name")
    private String registryStorageProviderName = null;

    @JsonProperty("with_chartmuseum")
    private Boolean withChartmuseum = null;

    @JsonProperty("registry_url")
    private String registryUrl = null;

    public GeneralInfo readOnly(Boolean readOnly)
    {
        this.readOnly = readOnly;
        return this;
    }

    /**
     * The flag to indicate whether Harbor is in readonly mode.
     *
     * @return readOnly
     **/
    @ApiModelProperty(value = "The flag to indicate whether Harbor is in readonly mode.")
    public Boolean isReadOnly()
    {
        return readOnly;
    }

    public void setReadOnly(Boolean readOnly)
    {
        this.readOnly = readOnly;
    }

    public GeneralInfo authproxySettings(AuthproxySetting authproxySettings)
    {
        this.authproxySettings = authproxySettings;
        return this;
    }

    /**
     * The setting of auth proxy this is only available when Harbor relies on authproxy for authentication.
     *
     * @return authproxySettings
     **/
    @ApiModelProperty(value = "The setting of auth proxy this is only available when Harbor relies on authproxy for authentication.")
    public AuthproxySetting getAuthproxySettings()
    {
        return authproxySettings;
    }

    public void setAuthproxySettings(AuthproxySetting authproxySettings)
    {
        this.authproxySettings = authproxySettings;
    }

    public GeneralInfo harborVersion(String harborVersion)
    {
        this.harborVersion = harborVersion;
        return this;
    }

    /**
     * The build version of Harbor.
     *
     * @return harborVersion
     **/
    @ApiModelProperty(value = "The build version of Harbor.")
    public String getHarborVersion()
    {
        return harborVersion;
    }

    public void setHarborVersion(String harborVersion)
    {
        this.harborVersion = harborVersion;
    }

    public GeneralInfo notificationEnable(Boolean notificationEnable)
    {
        this.notificationEnable = notificationEnable;
        return this;
    }

    /**
     * The flag to indicate whether notification mechanism is enabled on Harbor instance.
     *
     * @return notificationEnable
     **/
    @ApiModelProperty(value = "The flag to indicate whether notification mechanism is enabled on Harbor instance.")
    public Boolean isNotificationEnable()
    {
        return notificationEnable;
    }

    public void setNotificationEnable(Boolean notificationEnable)
    {
        this.notificationEnable = notificationEnable;
    }

    public GeneralInfo authMode(String authMode)
    {
        this.authMode = authMode;
        return this;
    }

    /**
     * The auth mode of current Harbor instance.
     *
     * @return authMode
     **/
    @ApiModelProperty(value = "The auth mode of current Harbor instance.")
    public String getAuthMode()
    {
        return authMode;
    }

    public void setAuthMode(String authMode)
    {
        this.authMode = authMode;
    }

    public GeneralInfo selfRegistration(Boolean selfRegistration)
    {
        this.selfRegistration = selfRegistration;
        return this;
    }

    /**
     * Indicate whether the Harbor instance enable user to register himself.
     *
     * @return selfRegistration
     **/
    @ApiModelProperty(value = "Indicate whether the Harbor instance enable user to register himself.")
    public Boolean isSelfRegistration()
    {
        return selfRegistration;
    }

    public void setSelfRegistration(Boolean selfRegistration)
    {
        this.selfRegistration = selfRegistration;
    }

    public GeneralInfo externalUrl(String externalUrl)
    {
        this.externalUrl = externalUrl;
        return this;
    }

    /**
     * The external URL of Harbor, with protocol.
     *
     * @return externalUrl
     **/
    @ApiModelProperty(value = "The external URL of Harbor, with protocol.")
    public String getExternalUrl()
    {
        return externalUrl;
    }

    public void setExternalUrl(String externalUrl)
    {
        this.externalUrl = externalUrl;
    }

    public GeneralInfo projectCreationRestriction(String projectCreationRestriction)
    {
        this.projectCreationRestriction = projectCreationRestriction;
        return this;
    }

    /**
     * Indicate who can create projects, it could be &#39;adminonly&#39; or &#39;everyone&#39;.
     *
     * @return projectCreationRestriction
     **/
    @ApiModelProperty(value = "Indicate who can create projects, it could be 'adminonly' or 'everyone'.")
    public String getProjectCreationRestriction()
    {
        return projectCreationRestriction;
    }

    public void setProjectCreationRestriction(String projectCreationRestriction)
    {
        this.projectCreationRestriction = projectCreationRestriction;
    }

    public GeneralInfo hasCaRoot(Boolean hasCaRoot)
    {
        this.hasCaRoot = hasCaRoot;
        return this;
    }

    /**
     * Indicate whether there is a ca root cert file ready for download in the file system.
     *
     * @return hasCaRoot
     **/
    @ApiModelProperty(value = "Indicate whether there is a ca root cert file ready for download in the file system.")
    public Boolean isHasCaRoot()
    {
        return hasCaRoot;
    }

    public void setHasCaRoot(Boolean hasCaRoot)
    {
        this.hasCaRoot = hasCaRoot;
    }

    public GeneralInfo withNotary(Boolean withNotary)
    {
        this.withNotary = withNotary;
        return this;
    }

    /**
     * If the Harbor instance is deployed with nested notary.
     *
     * @return withNotary
     **/
    @ApiModelProperty(value = "If the Harbor instance is deployed with nested notary.")
    public Boolean isWithNotary()
    {
        return withNotary;
    }

    public void setWithNotary(Boolean withNotary)
    {
        this.withNotary = withNotary;
    }

    public GeneralInfo registryStorageProviderName(String registryStorageProviderName)
    {
        this.registryStorageProviderName = registryStorageProviderName;
        return this;
    }

    /**
     * The storage provider&#39;s name of Harbor registry
     *
     * @return registryStorageProviderName
     **/
    @ApiModelProperty(value = "The storage provider's name of Harbor registry")
    public String getRegistryStorageProviderName()
    {
        return registryStorageProviderName;
    }

    public void setRegistryStorageProviderName(String registryStorageProviderName)
    {
        this.registryStorageProviderName = registryStorageProviderName;
    }

    public GeneralInfo withChartmuseum(Boolean withChartmuseum)
    {
        this.withChartmuseum = withChartmuseum;
        return this;
    }

    /**
     * If the Harbor instance is deployed with nested chartmuseum.
     *
     * @return withChartmuseum
     **/
    @ApiModelProperty(value = "If the Harbor instance is deployed with nested chartmuseum.")
    public Boolean isWithChartmuseum()
    {
        return withChartmuseum;
    }

    public void setWithChartmuseum(Boolean withChartmuseum)
    {
        this.withChartmuseum = withChartmuseum;
    }

    public GeneralInfo registryUrl(String registryUrl)
    {
        this.registryUrl = registryUrl;
        return this;
    }

    /**
     * The url of registry against which the docker command should be issued.
     *
     * @return registryUrl
     **/
    @ApiModelProperty(value = "The url of registry against which the docker command should be issued.")
    public String getRegistryUrl()
    {
        return registryUrl;
    }

    public void setRegistryUrl(String registryUrl)
    {
        this.registryUrl = registryUrl;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        GeneralInfo generalInfo = (GeneralInfo) o;
        return Objects.equals(this.readOnly, generalInfo.readOnly) &&
                Objects.equals(this.authproxySettings, generalInfo.authproxySettings) &&
                Objects.equals(this.harborVersion, generalInfo.harborVersion) &&
                Objects.equals(this.notificationEnable, generalInfo.notificationEnable) &&
                Objects.equals(this.authMode, generalInfo.authMode) &&
                Objects.equals(this.selfRegistration, generalInfo.selfRegistration) &&
                Objects.equals(this.externalUrl, generalInfo.externalUrl) &&
                Objects.equals(this.projectCreationRestriction, generalInfo.projectCreationRestriction) &&
                Objects.equals(this.hasCaRoot, generalInfo.hasCaRoot) &&
                Objects.equals(this.withNotary, generalInfo.withNotary) &&
                Objects.equals(this.registryStorageProviderName, generalInfo.registryStorageProviderName) &&
                Objects.equals(this.withChartmuseum, generalInfo.withChartmuseum) &&
                Objects.equals(this.registryUrl, generalInfo.registryUrl);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(readOnly, authproxySettings, harborVersion, notificationEnable, authMode, selfRegistration, externalUrl, projectCreationRestriction, hasCaRoot, withNotary, registryStorageProviderName, withChartmuseum, registryUrl);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class GeneralInfo {\n");

        sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
        sb.append("    authproxySettings: ").append(toIndentedString(authproxySettings)).append("\n");
        sb.append("    harborVersion: ").append(toIndentedString(harborVersion)).append("\n");
        sb.append("    notificationEnable: ").append(toIndentedString(notificationEnable)).append("\n");
        sb.append("    authMode: ").append(toIndentedString(authMode)).append("\n");
        sb.append("    selfRegistration: ").append(toIndentedString(selfRegistration)).append("\n");
        sb.append("    externalUrl: ").append(toIndentedString(externalUrl)).append("\n");
        sb.append("    projectCreationRestriction: ").append(toIndentedString(projectCreationRestriction)).append("\n");
        sb.append("    hasCaRoot: ").append(toIndentedString(hasCaRoot)).append("\n");
        sb.append("    withNotary: ").append(toIndentedString(withNotary)).append("\n");
        sb.append("    registryStorageProviderName: ").append(toIndentedString(registryStorageProviderName)).append("\n");
        sb.append("    withChartmuseum: ").append(toIndentedString(withChartmuseum)).append("\n");
        sb.append("    registryUrl: ").append(toIndentedString(registryUrl)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

