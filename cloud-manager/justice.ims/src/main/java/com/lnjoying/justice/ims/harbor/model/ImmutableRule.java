/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ImmutableRule
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class ImmutableRule
{
    @JsonProperty("priority")
    private Integer priority = null;

    @JsonProperty("scope_selectors")
    private Map<String, List<ImmutableSelector>> scopeSelectors = null;

    @JsonProperty("disabled")
    private Boolean disabled = null;

    @JsonProperty("params")
    private Map<String, Object> params = null;

    @JsonProperty("template")
    private String template = null;

    @JsonProperty("action")
    private String action = null;

    @JsonProperty("tag_selectors")
    private List<ImmutableSelector> tagSelectors = null;

    @JsonProperty("id")
    private Integer id = null;

    public ImmutableRule priority(Integer priority)
    {
        this.priority = priority;
        return this;
    }

    /**
     * Get priority
     *
     * @return priority
     **/
    @ApiModelProperty(value = "")
    public Integer getPriority()
    {
        return priority;
    }

    public void setPriority(Integer priority)
    {
        this.priority = priority;
    }

    public ImmutableRule scopeSelectors(Map<String, List<ImmutableSelector>> scopeSelectors)
    {
        this.scopeSelectors = scopeSelectors;
        return this;
    }

    public ImmutableRule putScopeSelectorsItem(String key, List<ImmutableSelector> scopeSelectorsItem)
    {
        if (this.scopeSelectors == null)
        {
            this.scopeSelectors = new HashMap<>();
        }
        this.scopeSelectors.put(key, scopeSelectorsItem);
        return this;
    }

    /**
     * Get scopeSelectors
     *
     * @return scopeSelectors
     **/
    @ApiModelProperty(value = "")
    public Map<String, List<ImmutableSelector>> getScopeSelectors()
    {
        return scopeSelectors;
    }

    public void setScopeSelectors(Map<String, List<ImmutableSelector>> scopeSelectors)
    {
        this.scopeSelectors = scopeSelectors;
    }

    public ImmutableRule disabled(Boolean disabled)
    {
        this.disabled = disabled;
        return this;
    }

    /**
     * Get disabled
     *
     * @return disabled
     **/
    @ApiModelProperty(value = "")
    public Boolean isDisabled()
    {
        return disabled;
    }

    public void setDisabled(Boolean disabled)
    {
        this.disabled = disabled;
    }

    public ImmutableRule params(Map<String, Object> params)
    {
        this.params = params;
        return this;
    }

    public ImmutableRule putParamsItem(String key, Object paramsItem)
    {
        if (this.params == null)
        {
            this.params = new HashMap<>();
        }
        this.params.put(key, paramsItem);
        return this;
    }

    /**
     * Get params
     *
     * @return params
     **/
    @ApiModelProperty(value = "")
    public Map<String, Object> getParams()
    {
        return params;
    }

    public void setParams(Map<String, Object> params)
    {
        this.params = params;
    }

    public ImmutableRule template(String template)
    {
        this.template = template;
        return this;
    }

    /**
     * Get template
     *
     * @return template
     **/
    @ApiModelProperty(value = "")
    public String getTemplate()
    {
        return template;
    }

    public void setTemplate(String template)
    {
        this.template = template;
    }

    public ImmutableRule action(String action)
    {
        this.action = action;
        return this;
    }

    /**
     * Get action
     *
     * @return action
     **/
    @ApiModelProperty(value = "")
    public String getAction()
    {
        return action;
    }

    public void setAction(String action)
    {
        this.action = action;
    }

    public ImmutableRule tagSelectors(List<ImmutableSelector> tagSelectors)
    {
        this.tagSelectors = tagSelectors;
        return this;
    }

    public ImmutableRule addTagSelectorsItem(ImmutableSelector tagSelectorsItem)
    {
        if (this.tagSelectors == null)
        {
            this.tagSelectors = new ArrayList<>();
        }
        this.tagSelectors.add(tagSelectorsItem);
        return this;
    }

    /**
     * Get tagSelectors
     *
     * @return tagSelectors
     **/
    @ApiModelProperty(value = "")
    public List<ImmutableSelector> getTagSelectors()
    {
        return tagSelectors;
    }

    public void setTagSelectors(List<ImmutableSelector> tagSelectors)
    {
        this.tagSelectors = tagSelectors;
    }

    public ImmutableRule id(Integer id)
    {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     **/
    @ApiModelProperty(value = "")
    public Integer getId()
    {
        return id;
    }

    public void setId(Integer id)
    {
        this.id = id;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        ImmutableRule immutableRule = (ImmutableRule) o;
        return Objects.equals(this.priority, immutableRule.priority) &&
                Objects.equals(this.scopeSelectors, immutableRule.scopeSelectors) &&
                Objects.equals(this.disabled, immutableRule.disabled) &&
                Objects.equals(this.params, immutableRule.params) &&
                Objects.equals(this.template, immutableRule.template) &&
                Objects.equals(this.action, immutableRule.action) &&
                Objects.equals(this.tagSelectors, immutableRule.tagSelectors) &&
                Objects.equals(this.id, immutableRule.id);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(priority, scopeSelectors, disabled, params, template, action, tagSelectors, id);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class ImmutableRule {\n");

        sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
        sb.append("    scopeSelectors: ").append(toIndentedString(scopeSelectors)).append("\n");
        sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
        sb.append("    params: ").append(toIndentedString(params)).append("\n");
        sb.append("    template: ").append(toIndentedString(template)).append("\n");
        sb.append("    action: ").append(toIndentedString(action)).append("\n");
        sb.append("    tagSelectors: ").append(toIndentedString(tagSelectors)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

