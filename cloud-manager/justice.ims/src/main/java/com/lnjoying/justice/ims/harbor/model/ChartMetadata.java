/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;

/**
 * The metadata of chart version
 */
@ApiModel(description = "The metadata of chart version")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class ChartMetadata
{
    @JsonProperty("engine")
    private String engine = null;

    @JsonProperty("description")
    private String description = null;

    @JsonProperty("deprecated")
    private Boolean deprecated = null;

    @JsonProperty("appVersion")
    private String appVersion = null;

    @JsonProperty("apiVersion")
    private String apiVersion = null;

    @JsonProperty("name")
    private String name = null;

    @JsonProperty("sources")
    private List<String> sources = null;

    @JsonProperty("version")
    private String version = null;

    @JsonProperty("keywords")
    private List<String> keywords = null;

    @JsonProperty("home")
    private String home = null;

    @JsonProperty("icon")
    private String icon = null;

    public ChartMetadata engine(String engine)
    {
        this.engine = engine;
        return this;
    }

    /**
     * The name of template engine
     *
     * @return engine
     **/
    @ApiModelProperty(required = true, value = "The name of template engine")
    public String getEngine()
    {
        return engine;
    }

    public void setEngine(String engine)
    {
        this.engine = engine;
    }

    public ChartMetadata description(String description)
    {
        this.description = description;
        return this;
    }

    /**
     * A one-sentence description of chart
     *
     * @return description
     **/
    @ApiModelProperty(value = "A one-sentence description of chart")
    public String getDescription()
    {
        return description;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }

    public ChartMetadata deprecated(Boolean deprecated)
    {
        this.deprecated = deprecated;
        return this;
    }

    /**
     * Whether or not this chart is deprecated
     *
     * @return deprecated
     **/
    @ApiModelProperty(value = "Whether or not this chart is deprecated")
    public Boolean isDeprecated()
    {
        return deprecated;
    }

    public void setDeprecated(Boolean deprecated)
    {
        this.deprecated = deprecated;
    }

    public ChartMetadata appVersion(String appVersion)
    {
        this.appVersion = appVersion;
        return this;
    }

    /**
     * The version of the application enclosed in the chart
     *
     * @return appVersion
     **/
    @ApiModelProperty(required = true, value = "The version of the application enclosed in the chart")
    public String getAppVersion()
    {
        return appVersion;
    }

    public void setAppVersion(String appVersion)
    {
        this.appVersion = appVersion;
    }

    public ChartMetadata apiVersion(String apiVersion)
    {
        this.apiVersion = apiVersion;
        return this;
    }

    /**
     * The API version of this chart
     *
     * @return apiVersion
     **/
    @ApiModelProperty(required = true, value = "The API version of this chart")
    public String getApiVersion()
    {
        return apiVersion;
    }

    public void setApiVersion(String apiVersion)
    {
        this.apiVersion = apiVersion;
    }

    public ChartMetadata name(String name)
    {
        this.name = name;
        return this;
    }

    /**
     * The name of the chart
     *
     * @return name
     **/
    @ApiModelProperty(required = true, value = "The name of the chart")
    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public ChartMetadata sources(List<String> sources)
    {
        this.sources = sources;
        return this;
    }

    public ChartMetadata addSourcesItem(String sourcesItem)
    {
        if (this.sources == null)
        {
            this.sources = new ArrayList<>();
        }
        this.sources.add(sourcesItem);
        return this;
    }

    /**
     * The URL to the source code of chart
     *
     * @return sources
     **/
    @ApiModelProperty(value = "The URL to the source code of chart")
    public List<String> getSources()
    {
        return sources;
    }

    public void setSources(List<String> sources)
    {
        this.sources = sources;
    }

    public ChartMetadata version(String version)
    {
        this.version = version;
        return this;
    }

    /**
     * A SemVer 2 version of chart
     *
     * @return version
     **/
    @ApiModelProperty(required = true, value = "A SemVer 2 version of chart")
    public String getVersion()
    {
        return version;
    }

    public void setVersion(String version)
    {
        this.version = version;
    }

    public ChartMetadata keywords(List<String> keywords)
    {
        this.keywords = keywords;
        return this;
    }

    public ChartMetadata addKeywordsItem(String keywordsItem)
    {
        if (this.keywords == null)
        {
            this.keywords = new ArrayList<>();
        }
        this.keywords.add(keywordsItem);
        return this;
    }

    /**
     * A list of string keywords
     *
     * @return keywords
     **/
    @ApiModelProperty(value = "A list of string keywords")
    public List<String> getKeywords()
    {
        return keywords;
    }

    public void setKeywords(List<String> keywords)
    {
        this.keywords = keywords;
    }

    public ChartMetadata home(String home)
    {
        this.home = home;
        return this;
    }

    /**
     * The URL to the relevant project page
     *
     * @return home
     **/
    @ApiModelProperty(value = "The URL to the relevant project page")
    public String getHome()
    {
        return home;
    }

    public void setHome(String home)
    {
        this.home = home;
    }

    public ChartMetadata icon(String icon)
    {
        this.icon = icon;
        return this;
    }

    /**
     * The URL to an icon file
     *
     * @return icon
     **/
    @ApiModelProperty(required = true, value = "The URL to an icon file")
    public String getIcon()
    {
        return icon;
    }

    public void setIcon(String icon)
    {
        this.icon = icon;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        ChartMetadata chartMetadata = (ChartMetadata) o;
        return Objects.equals(this.engine, chartMetadata.engine) &&
                Objects.equals(this.description, chartMetadata.description) &&
                Objects.equals(this.deprecated, chartMetadata.deprecated) &&
                Objects.equals(this.appVersion, chartMetadata.appVersion) &&
                Objects.equals(this.apiVersion, chartMetadata.apiVersion) &&
                Objects.equals(this.name, chartMetadata.name) &&
                Objects.equals(this.sources, chartMetadata.sources) &&
                Objects.equals(this.version, chartMetadata.version) &&
                Objects.equals(this.keywords, chartMetadata.keywords) &&
                Objects.equals(this.home, chartMetadata.home) &&
                Objects.equals(this.icon, chartMetadata.icon);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(engine, description, deprecated, appVersion, apiVersion, name, sources, version, keywords, home, icon);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class ChartMetadata {\n");

        sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
        sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
        sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
        sb.append("    home: ").append(toIndentedString(home)).append("\n");
        sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

