/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The metadata info of the scanner adapter
 */
@ApiModel(description = "The metadata info of the scanner adapter")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class ScannerAdapterMetadata
{
    @JsonProperty("scanner")
    private Scanner scanner = null;

    @JsonProperty("capabilities")
    private List<ScannerCapability> capabilities = null;

    @JsonProperty("properties")
    private Map<String, String> properties = null;

    public ScannerAdapterMetadata scanner(Scanner scanner)
    {
        this.scanner = scanner;
        return this;
    }

    /**
     * Get scanner
     *
     * @return scanner
     **/
    @ApiModelProperty(value = "")
    public Scanner getScanner()
    {
        return scanner;
    }

    public void setScanner(Scanner scanner)
    {
        this.scanner = scanner;
    }

    public ScannerAdapterMetadata capabilities(List<ScannerCapability> capabilities)
    {
        this.capabilities = capabilities;
        return this;
    }

    public ScannerAdapterMetadata addCapabilitiesItem(ScannerCapability capabilitiesItem)
    {
        if (this.capabilities == null)
        {
            this.capabilities = new ArrayList<>();
        }
        this.capabilities.add(capabilitiesItem);
        return this;
    }

    /**
     * Get capabilities
     *
     * @return capabilities
     **/
    @ApiModelProperty(value = "")
    public List<ScannerCapability> getCapabilities()
    {
        return capabilities;
    }

    public void setCapabilities(List<ScannerCapability> capabilities)
    {
        this.capabilities = capabilities;
    }

    public ScannerAdapterMetadata properties(Map<String, String> properties)
    {
        this.properties = properties;
        return this;
    }

    public ScannerAdapterMetadata putPropertiesItem(String key, String propertiesItem)
    {
        if (this.properties == null)
        {
            this.properties = new HashMap<>();
        }
        this.properties.put(key, propertiesItem);
        return this;
    }

    /**
     * Get properties
     *
     * @return properties
     **/
    @ApiModelProperty(example = "{\"harbor.scanner-adapter/registry-authorization-type\":\"Bearer\"}", value = "")
    public Map<String, String> getProperties()
    {
        return properties;
    }

    public void setProperties(Map<String, String> properties)
    {
        this.properties = properties;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        ScannerAdapterMetadata scannerAdapterMetadata = (ScannerAdapterMetadata) o;
        return Objects.equals(this.scanner, scannerAdapterMetadata.scanner) &&
                Objects.equals(this.capabilities, scannerAdapterMetadata.capabilities) &&
                Objects.equals(this.properties, scannerAdapterMetadata.properties);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(scanner, capabilities, properties);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class ScannerAdapterMetadata {\n");

        sb.append("    scanner: ").append(toIndentedString(scanner)).append("\n");
        sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
        sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

