/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

/**
 * Repository
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class Repository
{
    @JsonProperty("update_time")
    private OffsetDateTime updateTime = null;

    @JsonProperty("description")
    private String description = null;

    @JsonProperty("pull_count")
    private Long pullCount = null;

    @JsonProperty("creation_time")
    private OffsetDateTime creationTime = null;

    @JsonProperty("artifact_count")
    private Long artifactCount = null;

    @JsonProperty("project_id")
    private Long projectId = null;

    @JsonProperty("id")
    private Long id = null;

    @JsonProperty("name")
    private String name = null;

    public Repository updateTime(OffsetDateTime updateTime)
    {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * The update time of the repository
     *
     * @return updateTime
     **/
    @ApiModelProperty(value = "The update time of the repository")
    public OffsetDateTime getUpdateTime()
    {
        return updateTime;
    }

    public void setUpdateTime(OffsetDateTime updateTime)
    {
        this.updateTime = updateTime;
    }

    public Repository description(String description)
    {
        this.description = description;
        return this;
    }

    /**
     * The description of the repository
     *
     * @return description
     **/
    @ApiModelProperty(value = "The description of the repository")
    public String getDescription()
    {
        return description;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }

    public Repository pullCount(Long pullCount)
    {
        this.pullCount = pullCount;
        return this;
    }

    /**
     * The count that the artifact inside the repository pulled
     *
     * @return pullCount
     **/
    @ApiModelProperty(value = "The count that the artifact inside the repository pulled")
    public Long getPullCount()
    {
        return pullCount;
    }

    public void setPullCount(Long pullCount)
    {
        this.pullCount = pullCount;
    }

    public Repository creationTime(OffsetDateTime creationTime)
    {
        this.creationTime = creationTime;
        return this;
    }

    /**
     * The creation time of the repository
     *
     * @return creationTime
     **/
    @ApiModelProperty(value = "The creation time of the repository")
    public OffsetDateTime getCreationTime()
    {
        return creationTime;
    }

    public void setCreationTime(OffsetDateTime creationTime)
    {
        this.creationTime = creationTime;
    }

    public Repository artifactCount(Long artifactCount)
    {
        this.artifactCount = artifactCount;
        return this;
    }

    /**
     * The count of the artifacts inside the repository
     *
     * @return artifactCount
     **/
    @ApiModelProperty(value = "The count of the artifacts inside the repository")
    public Long getArtifactCount()
    {
        return artifactCount;
    }

    public void setArtifactCount(Long artifactCount)
    {
        this.artifactCount = artifactCount;
    }

    public Repository projectId(Long projectId)
    {
        this.projectId = projectId;
        return this;
    }

    /**
     * The ID of the project that the repository belongs to
     *
     * @return projectId
     **/
    @ApiModelProperty(value = "The ID of the project that the repository belongs to")
    public Long getProjectId()
    {
        return projectId;
    }

    public void setProjectId(Long projectId)
    {
        this.projectId = projectId;
    }

    public Repository id(Long id)
    {
        this.id = id;
        return this;
    }

    /**
     * The ID of the repository
     *
     * @return id
     **/
    @ApiModelProperty(value = "The ID of the repository")
    public Long getId()
    {
        return id;
    }

    public void setId(Long id)
    {
        this.id = id;
    }

    public Repository name(String name)
    {
        this.name = name;
        return this;
    }

    /**
     * The name of the repository
     *
     * @return name
     **/
    @ApiModelProperty(value = "The name of the repository")
    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        Repository repository = (Repository) o;
        return Objects.equals(this.updateTime, repository.updateTime) &&
                Objects.equals(this.description, repository.description) &&
                Objects.equals(this.pullCount, repository.pullCount) &&
                Objects.equals(this.creationTime, repository.creationTime) &&
                Objects.equals(this.artifactCount, repository.artifactCount) &&
                Objects.equals(this.projectId, repository.projectId) &&
                Objects.equals(this.id, repository.id) &&
                Objects.equals(this.name, repository.name);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(updateTime, description, pullCount, creationTime, artifactCount, projectId, id, name);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Repository {\n");

        sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    pullCount: ").append(toIndentedString(pullCount)).append("\n");
        sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
        sb.append("    artifactCount: ").append(toIndentedString(artifactCount)).append("\n");
        sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

