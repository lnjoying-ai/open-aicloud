/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

/**
 * RegistryPing
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class RegistryPing
{
    @JsonProperty("access_key")
    private String accessKey = null;

    @JsonProperty("credential_type")
    private String credentialType = null;

    @JsonProperty("access_secret")
    private String accessSecret = null;

    @JsonProperty("url")
    private String url = null;

    @JsonProperty("insecure")
    private Boolean insecure = null;

    @JsonProperty("type")
    private String type = null;

    @JsonProperty("id")
    private Long id = null;

    public RegistryPing accessKey(String accessKey)
    {
        this.accessKey = accessKey;
        return this;
    }

    /**
     * The registry access key.
     *
     * @return accessKey
     **/
    @ApiModelProperty(value = "The registry access key.")
    public String getAccessKey()
    {
        return accessKey;
    }

    public void setAccessKey(String accessKey)
    {
        this.accessKey = accessKey;
    }

    public RegistryPing credentialType(String credentialType)
    {
        this.credentialType = credentialType;
        return this;
    }

    /**
     * Credential type of the registry, e.g. &#39;basic&#39;.
     *
     * @return credentialType
     **/
    @ApiModelProperty(value = "Credential type of the registry, e.g. 'basic'.")
    public String getCredentialType()
    {
        return credentialType;
    }

    public void setCredentialType(String credentialType)
    {
        this.credentialType = credentialType;
    }

    public RegistryPing accessSecret(String accessSecret)
    {
        this.accessSecret = accessSecret;
        return this;
    }

    /**
     * The registry access secret.
     *
     * @return accessSecret
     **/
    @ApiModelProperty(value = "The registry access secret.")
    public String getAccessSecret()
    {
        return accessSecret;
    }

    public void setAccessSecret(String accessSecret)
    {
        this.accessSecret = accessSecret;
    }

    public RegistryPing url(String url)
    {
        this.url = url;
        return this;
    }

    /**
     * The registry URL.
     *
     * @return url
     **/
    @ApiModelProperty(value = "The registry URL.")
    public String getUrl()
    {
        return url;
    }

    public void setUrl(String url)
    {
        this.url = url;
    }

    public RegistryPing insecure(Boolean insecure)
    {
        this.insecure = insecure;
        return this;
    }

    /**
     * Whether or not the certificate will be verified when Harbor tries to access the server.
     *
     * @return insecure
     **/
    @ApiModelProperty(value = "Whether or not the certificate will be verified when Harbor tries to access the server.")
    public Boolean isInsecure()
    {
        return insecure;
    }

    public void setInsecure(Boolean insecure)
    {
        this.insecure = insecure;
    }

    public RegistryPing type(String type)
    {
        this.type = type;
        return this;
    }

    /**
     * Type of the registry, e.g. &#39;harbor&#39;.
     *
     * @return type
     **/
    @ApiModelProperty(value = "Type of the registry, e.g. 'harbor'.")
    public String getType()
    {
        return type;
    }

    public void setType(String type)
    {
        this.type = type;
    }

    public RegistryPing id(Long id)
    {
        this.id = id;
        return this;
    }

    /**
     * The registry ID.
     *
     * @return id
     **/
    @ApiModelProperty(value = "The registry ID.")
    public Long getId()
    {
        return id;
    }

    public void setId(Long id)
    {
        this.id = id;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        RegistryPing registryPing = (RegistryPing) o;
        return Objects.equals(this.accessKey, registryPing.accessKey) &&
                Objects.equals(this.credentialType, registryPing.credentialType) &&
                Objects.equals(this.accessSecret, registryPing.accessSecret) &&
                Objects.equals(this.url, registryPing.url) &&
                Objects.equals(this.insecure, registryPing.insecure) &&
                Objects.equals(this.type, registryPing.type) &&
                Objects.equals(this.id, registryPing.id);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(accessKey, credentialType, accessSecret, url, insecure, type, id);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class RegistryPing {\n");

        sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
        sb.append("    credentialType: ").append(toIndentedString(credentialType)).append("\n");
        sb.append("    accessSecret: ").append(toIndentedString(accessSecret)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    insecure: ").append(toIndentedString(insecure)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

