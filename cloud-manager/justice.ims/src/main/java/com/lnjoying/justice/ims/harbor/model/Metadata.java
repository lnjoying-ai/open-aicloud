/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;

/**
 * Metadata
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class Metadata
{
    @JsonProperty("source")
    private String source = null;

    @JsonProperty("maintainers")
    private List<String> maintainers = null;

    @JsonProperty("version")
    private String version = null;

    @JsonProperty("name")
    private String name = null;

    @JsonProperty("id")
    private String id = null;

    @JsonProperty("icon")
    private String icon = null;

    public Metadata source(String source)
    {
        this.source = source;
        return this;
    }

    /**
     * source
     *
     * @return source
     **/
    @ApiModelProperty(value = "source")
    public String getSource()
    {
        return source;
    }

    public void setSource(String source)
    {
        this.source = source;
    }

    public Metadata maintainers(List<String> maintainers)
    {
        this.maintainers = maintainers;
        return this;
    }

    public Metadata addMaintainersItem(String maintainersItem)
    {
        if (this.maintainers == null)
        {
            this.maintainers = new ArrayList<>();
        }
        this.maintainers.add(maintainersItem);
        return this;
    }

    /**
     * maintainers
     *
     * @return maintainers
     **/
    @ApiModelProperty(value = "maintainers")
    public List<String> getMaintainers()
    {
        return maintainers;
    }

    public void setMaintainers(List<String> maintainers)
    {
        this.maintainers = maintainers;
    }

    public Metadata version(String version)
    {
        this.version = version;
        return this;
    }

    /**
     * version
     *
     * @return version
     **/
    @ApiModelProperty(value = "version")
    public String getVersion()
    {
        return version;
    }

    public void setVersion(String version)
    {
        this.version = version;
    }

    public Metadata name(String name)
    {
        this.name = name;
        return this;
    }

    /**
     * name
     *
     * @return name
     **/
    @ApiModelProperty(value = "name")
    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public Metadata id(String id)
    {
        this.id = id;
        return this;
    }

    /**
     * id
     *
     * @return id
     **/
    @ApiModelProperty(value = "id")
    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    public Metadata icon(String icon)
    {
        this.icon = icon;
        return this;
    }

    /**
     * icon
     *
     * @return icon
     **/
    @ApiModelProperty(value = "icon")
    public String getIcon()
    {
        return icon;
    }

    public void setIcon(String icon)
    {
        this.icon = icon;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        Metadata metadata = (Metadata) o;
        return Objects.equals(this.source, metadata.source) &&
                Objects.equals(this.maintainers, metadata.maintainers) &&
                Objects.equals(this.version, metadata.version) &&
                Objects.equals(this.name, metadata.name) &&
                Objects.equals(this.id, metadata.id) &&
                Objects.equals(this.icon, metadata.icon);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(source, maintainers, version, name, id, icon);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Metadata {\n");

        sb.append("    source: ").append(toIndentedString(source)).append("\n");
        sb.append("    maintainers: ").append(toIndentedString(maintainers)).append("\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

