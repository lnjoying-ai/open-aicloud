/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

/**
 * Tag
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class Tag
{
    @JsonProperty("repository_id")
    private Long repositoryId = null;

    @JsonProperty("name")
    private String name = null;

    @JsonProperty("push_time")
    private OffsetDateTime pushTime = null;

    @JsonProperty("pull_time")
    private OffsetDateTime pullTime = null;

    @JsonProperty("signed")
    private Boolean signed = null;

    @JsonProperty("id")
    private Long id = null;

    @JsonProperty("immutable")
    private Boolean immutable = null;

    @JsonProperty("artifact_id")
    private Long artifactId = null;

    public Tag repositoryId(Long repositoryId)
    {
        this.repositoryId = repositoryId;
        return this;
    }

    /**
     * The ID of the repository that the tag belongs to
     *
     * @return repositoryId
     **/
    @ApiModelProperty(value = "The ID of the repository that the tag belongs to")
    public Long getRepositoryId()
    {
        return repositoryId;
    }

    public void setRepositoryId(Long repositoryId)
    {
        this.repositoryId = repositoryId;
    }

    public Tag name(String name)
    {
        this.name = name;
        return this;
    }

    /**
     * The name of the tag
     *
     * @return name
     **/
    @ApiModelProperty(value = "The name of the tag")
    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public Tag pushTime(OffsetDateTime pushTime)
    {
        this.pushTime = pushTime;
        return this;
    }

    /**
     * The push time of the tag
     *
     * @return pushTime
     **/
    @ApiModelProperty(value = "The push time of the tag")
    public OffsetDateTime getPushTime()
    {
        return pushTime;
    }

    public void setPushTime(OffsetDateTime pushTime)
    {
        this.pushTime = pushTime;
    }

    public Tag pullTime(OffsetDateTime pullTime)
    {
        this.pullTime = pullTime;
        return this;
    }

    /**
     * The latest pull time of the tag
     *
     * @return pullTime
     **/
    @ApiModelProperty(value = "The latest pull time of the tag")
    public OffsetDateTime getPullTime()
    {
        return pullTime;
    }

    public void setPullTime(OffsetDateTime pullTime)
    {
        this.pullTime = pullTime;
    }

    public Tag signed(Boolean signed)
    {
        this.signed = signed;
        return this;
    }

    /**
     * The attribute indicates whether the tag is signed or not
     *
     * @return signed
     **/
    @ApiModelProperty(value = "The attribute indicates whether the tag is signed or not")
    public Boolean isSigned()
    {
        return signed;
    }

    public void setSigned(Boolean signed)
    {
        this.signed = signed;
    }

    public Tag id(Long id)
    {
        this.id = id;
        return this;
    }

    /**
     * The ID of the tag
     *
     * @return id
     **/
    @ApiModelProperty(value = "The ID of the tag")
    public Long getId()
    {
        return id;
    }

    public void setId(Long id)
    {
        this.id = id;
    }

    public Tag immutable(Boolean immutable)
    {
        this.immutable = immutable;
        return this;
    }

    /**
     * The immutable status of the tag
     *
     * @return immutable
     **/
    @ApiModelProperty(value = "The immutable status of the tag")
    public Boolean isImmutable()
    {
        return immutable;
    }

    public void setImmutable(Boolean immutable)
    {
        this.immutable = immutable;
    }

    public Tag artifactId(Long artifactId)
    {
        this.artifactId = artifactId;
        return this;
    }

    /**
     * The ID of the artifact that the tag attached to
     *
     * @return artifactId
     **/
    @ApiModelProperty(value = "The ID of the artifact that the tag attached to")
    public Long getArtifactId()
    {
        return artifactId;
    }

    public void setArtifactId(Long artifactId)
    {
        this.artifactId = artifactId;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        Tag tag = (Tag) o;
        return Objects.equals(this.repositoryId, tag.repositoryId) &&
                Objects.equals(this.name, tag.name) &&
                Objects.equals(this.pushTime, tag.pushTime) &&
                Objects.equals(this.pullTime, tag.pullTime) &&
                Objects.equals(this.signed, tag.signed) &&
                Objects.equals(this.id, tag.id) &&
                Objects.equals(this.immutable, tag.immutable) &&
                Objects.equals(this.artifactId, tag.artifactId);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(repositoryId, name, pushTime, pullTime, signed, id, immutable, artifactId);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Tag {\n");

        sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    pushTime: ").append(toIndentedString(pushTime)).append("\n");
        sb.append("    pullTime: ").append(toIndentedString(pullTime)).append("\n");
        sb.append("    signed: ").append(toIndentedString(signed)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    immutable: ").append(toIndentedString(immutable)).append("\n");
        sb.append("    artifactId: ").append(toIndentedString(artifactId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

