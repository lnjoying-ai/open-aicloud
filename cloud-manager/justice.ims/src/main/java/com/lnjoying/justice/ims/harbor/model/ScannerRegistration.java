/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

/**
 * Registration represents a named configuration for invoking a scanner via its adapter.
 */
@ApiModel(description = "Registration represents a named configuration for invoking a scanner via its adapter. ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class ScannerRegistration
{
    @JsonProperty("update_time")
    private OffsetDateTime updateTime = null;

    @JsonProperty("vendor")
    private String vendor = null;

    @JsonProperty("description")
    private String description = null;

    @JsonProperty("auth")
    private String auth = "";

    @JsonProperty("is_default")
    private Boolean isDefault = false;

    @JsonProperty("create_time")
    private OffsetDateTime createTime = null;

    @JsonProperty("uuid")
    private String uuid = null;

    @JsonProperty("disabled")
    private Boolean disabled = false;

    @JsonProperty("name")
    private String name = null;

    @JsonProperty("url")
    private String url = null;

    @JsonProperty("adapter")
    private String adapter = null;

    @JsonProperty("access_credential")
    private String accessCredential = null;

    @JsonProperty("version")
    private String version = null;

    @JsonProperty("health")
    private String health = "";

    @JsonProperty("use_internal_addr")
    private Boolean useInternalAddr = false;

    @JsonProperty("skip_certVerify")
    private Boolean skipCertVerify = false;

    public ScannerRegistration updateTime(OffsetDateTime updateTime)
    {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * The update time of this registration
     *
     * @return updateTime
     **/
    @ApiModelProperty(value = "The update time of this registration")
    public OffsetDateTime getUpdateTime()
    {
        return updateTime;
    }

    public void setUpdateTime(OffsetDateTime updateTime)
    {
        this.updateTime = updateTime;
    }

    public ScannerRegistration vendor(String vendor)
    {
        this.vendor = vendor;
        return this;
    }

    /**
     * Optional property to describe the vendor of the scanner registration
     *
     * @return vendor
     **/
    @ApiModelProperty(example = "CentOS", value = "Optional property to describe the vendor of the scanner registration")
    public String getVendor()
    {
        return vendor;
    }

    public void setVendor(String vendor)
    {
        this.vendor = vendor;
    }

    public ScannerRegistration description(String description)
    {
        this.description = description;
        return this;
    }

    /**
     * An optional description of this registration.
     *
     * @return description
     **/
    @ApiModelProperty(example = "A free-to-use tool that scans container images for package vulnerabilities. ", value = "An optional description of this registration.")
    public String getDescription()
    {
        return description;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }

    public ScannerRegistration auth(String auth)
    {
        this.auth = auth;
        return this;
    }

    /**
     * Specify what authentication approach is adopted for the HTTP communications. Supported types Basic\&quot;, \&quot;Bearer\&quot; and api key header \&quot;X-ScannerAdapter-API-Key\&quot;
     *
     * @return auth
     **/
    @ApiModelProperty(example = "Bearer", value = "Specify what authentication approach is adopted for the HTTP communications. Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\" ")
    public String getAuth()
    {
        return auth;
    }

    public void setAuth(String auth)
    {
        this.auth = auth;
    }

    public ScannerRegistration isDefault(Boolean isDefault)
    {
        this.isDefault = isDefault;
        return this;
    }

    /**
     * Indicate if the registration is set as the system default one
     *
     * @return isDefault
     **/
    @ApiModelProperty(value = "Indicate if the registration is set as the system default one")
    public Boolean isIsDefault()
    {
        return isDefault;
    }

    public void setIsDefault(Boolean isDefault)
    {
        this.isDefault = isDefault;
    }

    public ScannerRegistration createTime(OffsetDateTime createTime)
    {
        this.createTime = createTime;
        return this;
    }

    /**
     * The creation time of this registration
     *
     * @return createTime
     **/
    @ApiModelProperty(value = "The creation time of this registration")
    public OffsetDateTime getCreateTime()
    {
        return createTime;
    }

    public void setCreateTime(OffsetDateTime createTime)
    {
        this.createTime = createTime;
    }

    public ScannerRegistration uuid(String uuid)
    {
        this.uuid = uuid;
        return this;
    }

    /**
     * The unique identifier of this registration.
     *
     * @return uuid
     **/
    @ApiModelProperty(value = "The unique identifier of this registration.")
    public String getUuid()
    {
        return uuid;
    }

    public void setUuid(String uuid)
    {
        this.uuid = uuid;
    }

    public ScannerRegistration disabled(Boolean disabled)
    {
        this.disabled = disabled;
        return this;
    }

    /**
     * Indicate whether the registration is enabled or not
     *
     * @return disabled
     **/
    @ApiModelProperty(value = "Indicate whether the registration is enabled or not")
    public Boolean isDisabled()
    {
        return disabled;
    }

    public void setDisabled(Boolean disabled)
    {
        this.disabled = disabled;
    }

    public ScannerRegistration name(String name)
    {
        this.name = name;
        return this;
    }

    /**
     * The name of this registration.
     *
     * @return name
     **/
    @ApiModelProperty(example = "Trivy", value = "The name of this registration.")
    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public ScannerRegistration url(String url)
    {
        this.url = url;
        return this;
    }

    /**
     * A base URL of the scanner adapter
     *
     * @return url
     **/
    @ApiModelProperty(example = "http://harbor-scanner-trivy:8080", value = "A base URL of the scanner adapter")
    public String getUrl()
    {
        return url;
    }

    public void setUrl(String url)
    {
        this.url = url;
    }

    public ScannerRegistration adapter(String adapter)
    {
        this.adapter = adapter;
        return this;
    }

    /**
     * Optional property to describe the name of the scanner registration
     *
     * @return adapter
     **/
    @ApiModelProperty(example = "Trivy", value = "Optional property to describe the name of the scanner registration")
    public String getAdapter()
    {
        return adapter;
    }

    public void setAdapter(String adapter)
    {
        this.adapter = adapter;
    }

    public ScannerRegistration accessCredential(String accessCredential)
    {
        this.accessCredential = accessCredential;
        return this;
    }

    /**
     * An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
     *
     * @return accessCredential
     **/
    @ApiModelProperty(example = "Bearer: JWTTOKENGOESHERE", value = "An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. ")
    public String getAccessCredential()
    {
        return accessCredential;
    }

    public void setAccessCredential(String accessCredential)
    {
        this.accessCredential = accessCredential;
    }

    public ScannerRegistration version(String version)
    {
        this.version = version;
        return this;
    }

    /**
     * Optional property to describe the version of the scanner registration
     *
     * @return version
     **/
    @ApiModelProperty(example = "1.0.1", value = "Optional property to describe the version of the scanner registration")
    public String getVersion()
    {
        return version;
    }

    public void setVersion(String version)
    {
        this.version = version;
    }

    public ScannerRegistration health(String health)
    {
        this.health = health;
        return this;
    }

    /**
     * Indicate the healthy of the registration
     *
     * @return health
     **/
    @ApiModelProperty(example = "healthy", value = "Indicate the healthy of the registration")
    public String getHealth()
    {
        return health;
    }

    public void setHealth(String health)
    {
        this.health = health;
    }

    public ScannerRegistration useInternalAddr(Boolean useInternalAddr)
    {
        this.useInternalAddr = useInternalAddr;
        return this;
    }

    /**
     * Indicate whether use internal registry addr for the scanner to pull content or not
     *
     * @return useInternalAddr
     **/
    @ApiModelProperty(value = "Indicate whether use internal registry addr for the scanner to pull content or not")
    public Boolean isUseInternalAddr()
    {
        return useInternalAddr;
    }

    public void setUseInternalAddr(Boolean useInternalAddr)
    {
        this.useInternalAddr = useInternalAddr;
    }

    public ScannerRegistration skipCertVerify(Boolean skipCertVerify)
    {
        this.skipCertVerify = skipCertVerify;
        return this;
    }

    /**
     * Indicate if skip the certificate verification when sending HTTP requests
     *
     * @return skipCertVerify
     **/
    @ApiModelProperty(value = "Indicate if skip the certificate verification when sending HTTP requests")
    public Boolean isSkipCertVerify()
    {
        return skipCertVerify;
    }

    public void setSkipCertVerify(Boolean skipCertVerify)
    {
        this.skipCertVerify = skipCertVerify;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        ScannerRegistration scannerRegistration = (ScannerRegistration) o;
        return Objects.equals(this.updateTime, scannerRegistration.updateTime) &&
                Objects.equals(this.vendor, scannerRegistration.vendor) &&
                Objects.equals(this.description, scannerRegistration.description) &&
                Objects.equals(this.auth, scannerRegistration.auth) &&
                Objects.equals(this.isDefault, scannerRegistration.isDefault) &&
                Objects.equals(this.createTime, scannerRegistration.createTime) &&
                Objects.equals(this.uuid, scannerRegistration.uuid) &&
                Objects.equals(this.disabled, scannerRegistration.disabled) &&
                Objects.equals(this.name, scannerRegistration.name) &&
                Objects.equals(this.url, scannerRegistration.url) &&
                Objects.equals(this.adapter, scannerRegistration.adapter) &&
                Objects.equals(this.accessCredential, scannerRegistration.accessCredential) &&
                Objects.equals(this.version, scannerRegistration.version) &&
                Objects.equals(this.health, scannerRegistration.health) &&
                Objects.equals(this.useInternalAddr, scannerRegistration.useInternalAddr) &&
                Objects.equals(this.skipCertVerify, scannerRegistration.skipCertVerify);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(updateTime, vendor, description, auth, isDefault, createTime, uuid, disabled, name, url, adapter, accessCredential, version, health, useInternalAddr, skipCertVerify);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class ScannerRegistration {\n");

        sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
        sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
        sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
        sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    adapter: ").append(toIndentedString(adapter)).append("\n");
        sb.append("    accessCredential: ").append(toIndentedString(accessCredential)).append("\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("    health: ").append(toIndentedString(health)).append("\n");
        sb.append("    useInternalAddr: ").append(toIndentedString(useInternalAddr)).append("\n");
        sb.append("    skipCertVerify: ").append(toIndentedString(skipCertVerify)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

