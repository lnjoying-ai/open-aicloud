/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModelProperty;

/**
 * ScheduleObj
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class ScheduleObj
{
    @JsonProperty("cron")
    private String cron = null;

    /**
     * The schedule type. The valid values are &#39;Hourly&#39;, &#39;Daily&#39;, &#39;Weekly&#39;, &#39;Custom&#39;, &#39;Manual&#39; and &#39;None&#39;. &#39;Manual&#39; means to trigger it right away and &#39;None&#39; means to cancel the schedule.
     */
    public enum TypeEnum
    {
        HOURLY("Hourly"),

        DAILY("Daily"),

        WEEKLY("Weekly"),

        CUSTOM("Custom"),

        MANUAL("Manual"),

        NONE("None");

        private String value;

        TypeEnum(String value)
        {
            this.value = value;
        }

        @JsonValue
        public String getValue()
        {
            return value;
        }

        @Override
        public String toString()
        {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TypeEnum fromValue(String value)
        {
            for (TypeEnum b : TypeEnum.values())
            {
                if (b.value.equals(value))
                {
                    return b;
                }
            }
            return null;
        }
    }

    @JsonProperty("type")
    private TypeEnum type = null;

    public ScheduleObj cron(String cron)
    {
        this.cron = cron;
        return this;
    }

    /**
     * A cron expression, a time-based job scheduler.
     *
     * @return cron
     **/
    @ApiModelProperty(value = "A cron expression, a time-based job scheduler.")
    public String getCron()
    {
        return cron;
    }

    public void setCron(String cron)
    {
        this.cron = cron;
    }

    public ScheduleObj type(TypeEnum type)
    {
        this.type = type;
        return this;
    }

    /**
     * The schedule type. The valid values are &#39;Hourly&#39;, &#39;Daily&#39;, &#39;Weekly&#39;, &#39;Custom&#39;, &#39;Manual&#39; and &#39;None&#39;. &#39;Manual&#39; means to trigger it right away and &#39;None&#39; means to cancel the schedule.
     *
     * @return type
     **/
    @ApiModelProperty(value = "The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual' and 'None'. 'Manual' means to trigger it right away and 'None' means to cancel the schedule. ")
    public TypeEnum getType()
    {
        return type;
    }

    public void setType(TypeEnum type)
    {
        this.type = type;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        ScheduleObj scheduleObj = (ScheduleObj) o;
        return Objects.equals(this.cron, scheduleObj.cron) &&
                Objects.equals(this.type, scheduleObj.type);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(cron, type);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class ScheduleObj {\n");

        sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

