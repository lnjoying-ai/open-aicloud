/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;

/**
 * Search
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class Search
{
    @JsonProperty("project")
    private List<Project> project = null;

    @JsonProperty("chart")
    private List<SearchResult> chart = null;

    @JsonProperty("repository")
    private List<SearchRepository> repository = null;

    public Search project(List<Project> project)
    {
        this.project = project;
        return this;
    }

    public Search addProjectItem(Project projectItem)
    {
        if (this.project == null)
        {
            this.project = new ArrayList<>();
        }
        this.project.add(projectItem);
        return this;
    }

    /**
     * Search results of the projects that matched the filter keywords.
     *
     * @return project
     **/
    @ApiModelProperty(value = "Search results of the projects that matched the filter keywords.")
    public List<Project> getProject()
    {
        return project;
    }

    public void setProject(List<Project> project)
    {
        this.project = project;
    }

    public Search chart(List<SearchResult> chart)
    {
        this.chart = chart;
        return this;
    }

    public Search addChartItem(SearchResult chartItem)
    {
        if (this.chart == null)
        {
            this.chart = new ArrayList<>();
        }
        this.chart.add(chartItem);
        return this;
    }

    /**
     * Search results of the charts that macthed the filter keywords.
     *
     * @return chart
     **/
    @ApiModelProperty(value = "Search results of the charts that macthed the filter keywords.")
    public List<SearchResult> getChart()
    {
        return chart;
    }

    public void setChart(List<SearchResult> chart)
    {
        this.chart = chart;
    }

    public Search repository(List<SearchRepository> repository)
    {
        this.repository = repository;
        return this;
    }

    public Search addRepositoryItem(SearchRepository repositoryItem)
    {
        if (this.repository == null)
        {
            this.repository = new ArrayList<>();
        }
        this.repository.add(repositoryItem);
        return this;
    }

    /**
     * Search results of the repositories that matched the filter keywords.
     *
     * @return repository
     **/
    @ApiModelProperty(value = "Search results of the repositories that matched the filter keywords.")
    public List<SearchRepository> getRepository()
    {
        return repository;
    }

    public void setRepository(List<SearchRepository> repository)
    {
        this.repository = repository;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        Search search = (Search) o;
        return Objects.equals(this.project, search.project) &&
                Objects.equals(this.chart, search.chart) &&
                Objects.equals(this.repository, search.repository);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(project, chart, repository);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Search {\n");

        sb.append("    project: ").append(toIndentedString(project)).append("\n");
        sb.append("    chart: ").append(toIndentedString(chart)).append("\n");
        sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

