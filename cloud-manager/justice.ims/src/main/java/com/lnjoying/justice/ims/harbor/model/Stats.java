/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.HashMap;
import java.util.Map;

/**
 * Stats provides the overall progress of the scan all process.
 */
@ApiModel(description = "Stats provides the overall progress of the scan all process.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class Stats
{
    @JsonProperty("metrics")
    private Map<String, Integer> metrics = null;

    @JsonProperty("total")
    private Integer total = null;

    @JsonProperty("completed")
    private Integer completed = null;

    /**
     * The trigger of the scan all job.
     */
    public enum TriggerEnum
    {
        MANUAL("Manual"),

        SCHEDULE("Schedule"),

        EVENT("Event");

        private String value;

        TriggerEnum(String value)
        {
            this.value = value;
        }

        @JsonValue
        public String getValue()
        {
            return value;
        }

        @Override
        public String toString()
        {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TriggerEnum fromValue(String value)
        {
            for (TriggerEnum b : TriggerEnum.values())
            {
                if (b.value.equals(value))
                {
                    return b;
                }
            }
            return null;
        }
    }

    @JsonProperty("trigger")
    private TriggerEnum trigger = null;

    @JsonProperty("ongoing")
    private Boolean ongoing = null;

    public Stats metrics(Map<String, Integer> metrics)
    {
        this.metrics = metrics;
        return this;
    }

    public Stats putMetricsItem(String key, Integer metricsItem)
    {
        if (this.metrics == null)
        {
            this.metrics = new HashMap<>();
        }
        this.metrics.put(key, metricsItem);
        return this;
    }

    /**
     * The metrics data for the each status
     *
     * @return metrics
     **/
    @ApiModelProperty(example = "{\"Running\":3,\"Success\":5,\"Error\":2}", value = "The metrics data for the each status")
    public Map<String, Integer> getMetrics()
    {
        return metrics;
    }

    public void setMetrics(Map<String, Integer> metrics)
    {
        this.metrics = metrics;
    }

    public Stats total(Integer total)
    {
        this.total = total;
        return this;
    }

    /**
     * The total number of scan processes triggered by the scan all action
     *
     * @return total
     **/
    @ApiModelProperty(example = "100", value = "The total number of scan processes triggered by the scan all action")
    public Integer getTotal()
    {
        return total;
    }

    public void setTotal(Integer total)
    {
        this.total = total;
    }

    public Stats completed(Integer completed)
    {
        this.completed = completed;
        return this;
    }

    /**
     * The number of the finished scan processes triggered by the scan all action
     *
     * @return completed
     **/
    @ApiModelProperty(example = "90", value = "The number of the finished scan processes triggered by the scan all action")
    public Integer getCompleted()
    {
        return completed;
    }

    public void setCompleted(Integer completed)
    {
        this.completed = completed;
    }

    public Stats trigger(TriggerEnum trigger)
    {
        this.trigger = trigger;
        return this;
    }

    /**
     * The trigger of the scan all job.
     *
     * @return trigger
     **/
    @ApiModelProperty(value = "The trigger of the scan all job.")
    public TriggerEnum getTrigger()
    {
        return trigger;
    }

    public void setTrigger(TriggerEnum trigger)
    {
        this.trigger = trigger;
    }

    public Stats ongoing(Boolean ongoing)
    {
        this.ongoing = ongoing;
        return this;
    }

    /**
     * A flag indicating job status of scan all.
     *
     * @return ongoing
     **/
    @ApiModelProperty(value = "A flag indicating job status of scan all.")
    public Boolean isOngoing()
    {
        return ongoing;
    }

    public void setOngoing(Boolean ongoing)
    {
        this.ongoing = ongoing;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        Stats stats = (Stats) o;
        return Objects.equals(this.metrics, stats.metrics) &&
                Objects.equals(this.total, stats.total) &&
                Objects.equals(this.completed, stats.completed) &&
                Objects.equals(this.trigger, stats.trigger) &&
                Objects.equals(this.ongoing, stats.ongoing);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(metrics, total, completed, trigger, ongoing);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class Stats {\n");

        sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
        sb.append("    total: ").append(toIndentedString(total)).append("\n");
        sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
        sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
        sb.append("    ongoing: ").append(toIndentedString(ongoing)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

