/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.lnjoying.justice.ims.harbor.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * The webhook policy target object.
 */
@ApiModel(description = "The webhook policy target object.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-08-31T16:17:12.981+08:00")
public class WebhookTargetObject
{
    @JsonProperty("type")
    private String type = null;

    @JsonProperty("auth_header")
    private String authHeader = null;

    @JsonProperty("skip_cert_verify")
    private Boolean skipCertVerify = null;

    @JsonProperty("address")
    private String address = null;

    public WebhookTargetObject type(String type)
    {
        this.type = type;
        return this;
    }

    /**
     * The webhook target notify type.
     *
     * @return type
     **/
    @ApiModelProperty(value = "The webhook target notify type.")
    public String getType()
    {
        return type;
    }

    public void setType(String type)
    {
        this.type = type;
    }

    public WebhookTargetObject authHeader(String authHeader)
    {
        this.authHeader = authHeader;
        return this;
    }

    /**
     * The webhook auth header.
     *
     * @return authHeader
     **/
    @ApiModelProperty(value = "The webhook auth header.")
    public String getAuthHeader()
    {
        return authHeader;
    }

    public void setAuthHeader(String authHeader)
    {
        this.authHeader = authHeader;
    }

    public WebhookTargetObject skipCertVerify(Boolean skipCertVerify)
    {
        this.skipCertVerify = skipCertVerify;
        return this;
    }

    /**
     * Whether or not to skip cert verify.
     *
     * @return skipCertVerify
     **/
    @ApiModelProperty(value = "Whether or not to skip cert verify.")
    public Boolean isSkipCertVerify()
    {
        return skipCertVerify;
    }

    public void setSkipCertVerify(Boolean skipCertVerify)
    {
        this.skipCertVerify = skipCertVerify;
    }

    public WebhookTargetObject address(String address)
    {
        this.address = address;
        return this;
    }

    /**
     * The webhook target address.
     *
     * @return address
     **/
    @ApiModelProperty(value = "The webhook target address.")
    public String getAddress()
    {
        return address;
    }

    public void setAddress(String address)
    {
        this.address = address;
    }


    @Override
    public boolean equals(Object o)
    {
        if (this == o)
        {
            return true;
        }
        if (o == null || getClass() != o.getClass())
        {
            return false;
        }
        WebhookTargetObject webhookTargetObject = (WebhookTargetObject) o;
        return Objects.equals(this.type, webhookTargetObject.type) &&
                Objects.equals(this.authHeader, webhookTargetObject.authHeader) &&
                Objects.equals(this.skipCertVerify, webhookTargetObject.skipCertVerify) &&
                Objects.equals(this.address, webhookTargetObject.address);
    }

    @Override
    public int hashCode()
    {
        return Objects.hash(type, authHeader, skipCertVerify, address);
    }


    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("class WebhookTargetObject {\n");

        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    authHeader: ").append(toIndentedString(authHeader)).append("\n");
        sb.append("    skipCertVerify: ").append(toIndentedString(skipCertVerify)).append("\n");
        sb.append("    address: ").append(toIndentedString(address)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o)
    {
        if (o == null)
        {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

