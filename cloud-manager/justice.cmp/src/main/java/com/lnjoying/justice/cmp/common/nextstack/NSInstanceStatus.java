package com.lnjoying.justice.cmp.common.nextstack;

import com.lnjoying.justice.schema.entity.StatusCode;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public enum NSInstanceStatus
{
    INSTANCE_INIT(0,"创建中","INSTANCE_INIT"),
    INSTANCE_CREATING(1,"创建中","INSTANCE_CREATING"),
    INSTANCE_CREATED(2,"创建中","INSTANCE_CREATED"),
    INSTANCE_INJECTING(3,"创建中","INSTANCE_INJECTING"),
    INSTANCE_INJECT_BOOTING(4,"创建中","INSTANCE_INJECT_BOOTING"),
    INSTANCE_CLOUDINIT_DONE(5,"创建成功","INSTANCE_CLOUDINIT_DONE"),
    INSTANCE_RUNNING(6,"运行中","INSTANCE_RUNNING"),
    INSTANCE_POWEROFFING(7,"关机中","INSTANCE_POWEROFFING"),
    INSTANCE_POWEROFF(8,"已关机","INSTANCE_POWEROFF"),
    INSTANCE_POWERONING(9,"开机中","INSTANCE_POWERONING"),
    INSTANCE_MONITOR_TAG_DONE(10,"运行中","INSTANCE_MONITOR_TAG_DONE"),


    GET_PORT_PHASE_STATUS(11,"创建中","GET_PORT_PHASE_STATUS"),
    GET_INSTANCE_CREATED_STATUS(12,"创建中","GET_INSTANCE_CREATED_STATUS"),
    WAIT_INSTANCE_CLOUD_INIT_RESULT(13,"创建中","WAIT_INSTANCE_CLOUD_INIT_RESULT"),
    GET_INSTANCE_REMOVED_STATUS(14,"删除中","GET_INSTANCE_REMOVED_STATUS"),
    GET_SNAP_REMOVED_STATUS(15,"删除中","GET_SNAP_REMOVED_STATUS"),
    GET_INSTANCE_POWERON_RESULT(16,"开机中","GET_INSTANCE_POWERON_RESULT"),
    GET_INSTANCE_POWEROFF_RESULT(17,"关机中","GET_INSTANCE_POWEROFF_RESULT"),
    GET_SNAP_SWITCHED_STATUS(18,"快照准备中","GET_SNAP_SWITCHED_STATUS"),


    INSTANCE_CREATE_FAILED(21,"创建失败","INSTANCE_CREATE_FAILED"),
    INSTANCE_REMOVE_FAILED(22,"删除失败","INSTANCE_REMOVE_FAILED"),
    INSTANCE_INJECT_BOOT_FAILED(23,"创建失败","INSTANCE_INJECT_BOOT_FAILED"),
    INSTANCE_EJECT_FAILED(24,"创建失败","INSTANCE_EJECT_FAILED"),
    SNAP_CREATE_FAILED(25,"创建失败","SNAP_CREATE_FAILED"),
    SNAP_REMOVE_FAILED(26,"删除失败","SNAP_REMOVE_FAILED"),
    SNAP_SWITCH_FAILED(27,"快照切换失败","SNAP_SWITCH_FAILED"),
    INSTANCE_MIGRATE_FAILED(28,"迁移失败","INSTANCE_MIGRATE_FAILED"),
    INSTANCE_MIGRATE_CLEAN(29,"运行中","INSTANCE_MIGRATE_CLEAN"),


    SNAP_INIT(30,"创建中","SNAP_INIT"),
    SNAP_CREATING(31,"创建中","SNAP_CREATING"),
    SNAP_CREATED(32,"创建完成","SNAP_CREATED"),
    SNAP_SWITCHING(33,"回滚中","SNAP_SWITCHING"),
    SNAP_SWITCHED(34,"回滚成功","SNAP_SWITCHED"),
    SNAP_REMOVING(35,"删除中","SNAP_REMOVING"),


    HYPERVISOR_NODE_CREATED(40,"已添加","HYPERVISOR_NODE_CREATED"),
    HYPERVISOR_NODE_CHECKING(41,"添加中","HYPERVISOR_NODE_CHECKING"),
    HYPERVISOR_NODE_OFFLINE(42,"已离线","HYPERVISOR_NODE_OFFLINE"),


    SG_ADDED(50, "", "SG_ADDED"),
    SG_UPDATED(51, "", "SG_UPDATED"),
    SG_UPDATE_FAILED(52, "", "SG_UPDATE_FAILED"),
    APPLIED(53, "", "APPLIED"),
    UNAPPLIED(54, "", "UNAPPLIED"),
    APPLY_FAILED(55, "", "APPLY_FAILED"),
    UNAPPLY_FAILED(56, "", "UNAPPLY_FAILED"),
    APPLYING(57, "", "APPLYING"),
    UNAPPLYING(58, "", "UNAPPLYING"),


    INSTANCE_REBOOT_POWEROFFING(60,"关机中","INSTANCE_REBOOT_POWEROFFING"),


    INSTANCE_POWERING_OFF_DETACH_PCI(61, "", "INSTANCE_POWERING_OFF_DETACH_PCI"),
    GET_INSTANCE_POWERING_OFF_DETACH_PCI_STATUS(62, "", "GET_INSTANCE_POWERING_OFF_DETACH_PCI_STATUS"),
    INSTANCE_POWERED_OFF_DETACH_PCI(63, "", "INSTANCE_POWERED_OFF_DETACH_PCI"),
    INSTANCE_POWERING_ON_PREPARE_PCI(64, "", "INSTANCE_POWERING_ON_PREPARE_PCI"),
    INSTANCE_POWERING_ON_ATTACH_PCI(65, "", "INSTANCE_POWERING_ON_ATTACH_PCI"),
    INSTANCE_POWER_ON_FAILED(66, "", "INSTANCE_POWER_ON_FAILED"),


    PORT_CREATE(70,"创建中","PORT_CREATE"),


    DEVICE_ATTACHING(80, "", "DEVICE_ATTACHING"),
    DEVICE_AGENT_ATTACHING(81, "", "DEVICE_AGENT_ATTACHING"),
    DEVICE_DETACHING(82, "", "DEVICE_DETACHING"),
    DEVICE_AGENT_DETACHING(83, "", "DEVICE_AGENT_DETACHING"),
    DEVICE_ATTACH_FAILED(84, "", "DEVICE_ATTACH_FAILED"),
    DEVICE_DETACH_FAILED(85, "", "DEVICE_DETACH_FAILED"),
    DEVICE_ATTACHED(86, "", "DEVICE_ATTACHED"),
    DEVICE_DETACHED(87, "", "DEVICE_DETACHED"),
    DEVICE_INIT_CREATE(88, "", "DEVICE_INIT_CREATE"),


    INSTANCE_REMOVING(101,"删除中","INSTANCE_REMOVING"),
    INSTANCE_REMOVED_FAILED(103,"删除失败","INSTANCE_REMOVED_FAILED"),
    INSTANCE_EJECTING(104,"创建中","INSTANCE_EJECTING"),
    INSTANCE_EJECTED(105,"创建成功","INSTANCE_EJECTED"),


    INSTANCE_CREATE_FAILED_CLEANING(110,"创建失败","INSTANCE_CREATE_FAILED_CLEANING"),
    INSTANCE_CREATE_FAILED_CLEANED(111,"创建失败","INSTANCE_CREATE_FAILED_CLEANED"),


    INSTANCE_MIGRATE_INIT(300,"开始迁移","INSTANCE_MIGRATE_INIT"),
    INSTANCE_SUSPENDING(301,"迁移中","INSTANCE_SUSPENDING"),
    INSTANCE_SUSPENDED(302,"迁移中","INSTANCE_SUSPENDED"),
    GET_PORT_MIGRATED_STATUS(303,"迁移中","GET_PORT_MIGRATED_STATUS"),
    GET_INSTANCE_RESUME_STATUS(304,"迁移中","GET_INSTANCE_RESUME_STATUS"),
    INSTANCE_RESUMED(305,"迁移中","INSTANCE_RESUMED"),


    INSTANCE_RESIZE_INIT(350,"更新中","INSTANCE_RESIZE_INIT"),
    GET_INSTANCE_UPDATED_STATUS(351,"更新中","GET_INSTANCE_UPDATED_STATUS"),
    INSTANCE_BOOT_DEV_SWITCHING(352,"启动项切换中","INSTANCE_BOOT_DEV_SWITCHING"),
    GET_INSTANCE_BOOT_DEV_STATUS(353,"启动项切换中","GET_INSTANCE_BOOT_DEV_STATUS"),
    INSTANCE_RESET_PASSWORD_HOSTNAME(360, "重设密码", "INSTANCE_RESET_PASSWORD_HOSTNAME"),
    WAIT_INSTANCE_RESET_PASSWORD_HOSTNAME(361, "重设密码中", "WAIT_INSTANCE_RESET_PASSWORD_HOSTNAME");


    NSInstanceStatus(int code, String cnDesc, String enDesc)
    {
        this.code = code;
        this.desc = new HashMap<String, String>()
        {
            {
                put("cn", cnDesc);
                put("en", enDesc);
            }
        };
    }

    public static NSInstanceStatus fromCode(int code)
    {
        for (NSInstanceStatus current : NSInstanceStatus.values())
        {
            if (current.getCode() == code)
            {
                return current;
            }
        }
        throw new RuntimeException("Invalid error code: " + code);
    }

    private int code;

    private Map<String, String> desc;

    public int getCode() {
        return code;
    }

    public Map<String, String> getDesc()
    {
        return desc;
    }

    public StatusCode toStatusCode()
    {
        return new StatusCode(this.code, this.desc);
    }

    public static Set<Integer> CREATING_STATUS = new HashSet<Integer>(){
        {
            add(INSTANCE_INIT.getCode());
            add(INSTANCE_CREATING.getCode());
            add(INSTANCE_CREATED.getCode());
            add(INSTANCE_INJECTING.getCode());
            add(INSTANCE_INJECT_BOOTING.getCode());
            add(GET_PORT_PHASE_STATUS.getCode());
            add(GET_INSTANCE_CREATED_STATUS.getCode());
            add(WAIT_INSTANCE_CLOUD_INIT_RESULT.getCode());
            add(PORT_CREATE.getCode());
            add(INSTANCE_EJECTING.getCode());
            add(SNAP_INIT.getCode());
            add(SNAP_CREATING.getCode());
        }
    };
}
